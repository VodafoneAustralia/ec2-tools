#!/bin/bash -e

# Copyright (c) 2012 DiUS Computing Pty Ltd

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial 
# portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

export EC2_DESCRIBE_CMD="$EC2_HOME/bin/ec2-describe-instances"
export EC2_RUN_CMD="$EC2_HOME/bin/ec2-run-instances"
export EC2_TAG_CMD="$EC2_HOME/bin/ec2-create-tags"

DESCRIBE_FILE=/tmp/ec2_describe.out

check_mandatory_environment() {
  if [ -z "$(which ruby)" ]; then
    echo "Please ensure ruby 1.9.3 or greater is installed and in your PATH"
  fi
  
  if [ -z "$AWS_ACCESS_KEY" -o -z "$AWS_SECRET_KEY" ]; then
    echo "Please set AWS_ACCESS_KEY and AWS_SECRET_KEY"
    exit 1
  fi

  if [ -z "$EC2_HOME" -o ! -x "$EC2_HOME/bin/ec2-describe-instances" ]; then
    echo "Please set EC2_HOME and make sure it's pointing to installation of Amazon EC2 API tools"
    exit 1
  fi

  if [ -z "$EC2_URL" ]; then
    echo "Please set EC2_URL with the URL of the EC2 API endpoint in your region"
    exit 1
  fi

  if [ -z "$ROUTE53_ZONE_ID" -o -z "$ROUTE53_ZONE_NAME" ]; then
    echo "Please set both ROUTE53_ZONE_ID and ROUTE53_ZONE_NAME"
    exit 1
  fi
}

check_ssh_environment() {
  if [ -z "$EC2_SSH_USER" ]; then
    echo "Please set EC2_SSH_USER with a username that can connect to your instances via SSH"
    exit 1
  fi

  if [ -z "$EC2_SSH_KEY_PATH" ]; then
    echo "Please set EC2_SSH_KEY_PATH with the path to your EC2_USER's private key (e.g. ~/.ssh/ec2_key_pair.pem)"
    exit 1
  fi
}

get_instance_address() {
  if [ $# != 1 ]; then echo "get_instance_address() expects instance ID as argument"; exit 1; fi
  instance_id=$1

  wait_for_state $instance_id running

  ec2_ip_address=$(awk '/INSTANCE/ { print $14 }' $DESCRIBE_FILE)
  ec2_hostname=$(awk '/INSTANCE/ { print $4 }' $DESCRIBE_FILE)
}

wait_for_state() {
  set +e
  instance_id=$1
  expected_state=$2

  echo "Waiting for instance $instance_id to enter $expected_state state"
  matched=1
  while [ $matched == 1 ]; do
    $EC2_DESCRIBE_CMD $instance_id > $DESCRIBE_FILE
    grep $expected_state $DESCRIBE_FILE > /dev/null
    matched=$?        
    echo -n "."
  done
  
  echo ""  
  set -e
}
