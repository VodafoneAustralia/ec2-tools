#!/usr/bin/env ruby

# Copyright (c) 2012 DiUS Computing Pty Ltd

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial 
# portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

$: << File.expand_path("../../lib", __FILE__)

require 'rubygems'
require 'getoptlong'
require 'open3'
require 'socket'
require 'timeout'
require 'net/ssh'
require 'aws'
require 'ec2'

DEFAULT_INSTANCE_TYPE = "t1.micro"
USAGE = "Usage: ec2-launch -k KEY_PAIR [ -t TYPE] [ -g GROUP,... ]] [ -d DURATION ] AMI_NAME HOSTNAME"

instance_type = DEFAULT_INSTANCE_TYPE
security_groups = []
key_pair = nil
duration = nil

opts = GetoptLong.new(
    [ "--key-pair",	"-k", GetoptLong::REQUIRED_ARGUMENT ],
    [ "--type",	"-t", GetoptLong::REQUIRED_ARGUMENT ],
    [ "--group",	"-g", GetoptLong::REQUIRED_ARGUMENT ],
    [ "--duration",	"-d", GetoptLong::REQUIRED_ARGUMENT ]
)

begin
  opts.each do |opt, arg|
    case opt
      when "--key-pair"
        key_pair = arg
      when "--type"
        instance_type = arg
      when "--group"
        security_groups = arg.split(',')
      when "--duration"
        duration = arg
    end
  end
rescue GetoptLong::Error => e
  puts USAGE
  exit 1
end

unless key_pair and ARGV.length == 2
  puts USAGE
  exit 1
end

ami_name = ARGV[0]
hostname = ARGV[1]
short_hostname = hostname.split('.').first

ami = latest_ami_by_name(ami_name)
if !ami
  puts "No such AMI with name #{ami_name}"
  exit 1
end

instance_opts = {
  :image_id => ami.id,
  :key_name => key_pair,
  :instance_type => instance_type,
  :block_device_mappings => { "/dev/sda1" => { :volume_size => 100 } },
  :security_groups => security_groups
}

if duration
  instance_opts[:instance_initiated_shutdown_behavior] = 'terminate'
end

puts "Launching instance with hostname #{hostname} from AMI #{ami.id}"

instance = ec2.instances.create(instance_opts)

puts "EC2 Instance ID: #{instance.id}"
puts "Waiting for instance to transition to running state"

begin
  wait_for_instance_state(instance, :running)
rescue Timeout::Error
  puts "Timed out waiting for instance to transition to #{state} state"
  exit 1
end

puts "EC2 IP Address: #{instance.ip_address}"
puts "EC2 Hostname: #{instance.dns_name}"
puts "Tagged Hostname: #{hostname}"

begin
  name_instance(instance, hostname)
rescue exception
  puts exception.message
  exit 1
end

if duration
  puts "Waiting for port 22 to open on #{instance.dns_name}"
  begin
    wait_for_port instance.dns_name, 22
  rescue Timeout::Error
    puts "Timed out waiting for port to open"
    exit 1
  end
    
  puts "Scheduling termination in #{duration} minutes"
  ssh_exec(instance, "echo 'sudo halt' | at now + #{duration} min")
end
