#!/usr/bin/env ruby

# Copyright (c) 2012 DiUS Computing Pty Ltd

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial 
# portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

$: << File.expand_path("../../lib", __FILE__)

require 'rubygems'
require 'getoptlong'
require 'route53'

ROUTE53_ZONE_ID = ENV['ROUTE53_ZONE_ID']
ROUTE53_ZONE_NAME = ENV['ROUTE53_ZONE_NAME']

def usage
  puts "Usage: $0 [ -t TYPE ] [ -u ] NAME VALUE"
end

type = "A"
update_only = false

opts = GetoptLong.new(
    [ "--type",	"-t", GetoptLong::REQUIRED_ARGUMENT ],
    [ "--update-only",	"-u", GetoptLong::NO_ARGUMENT ]
)

begin
  opts.each do |opt, arg|
    case opt
      when "--type"
        type = arg.upcase
      when "--update-only"
        update_only = true
    end
  end
rescue GetoptLong::Error => e
  usage
end


unless ARGV.length == 2
  usage
  exit 1
end

name = ARGV[0]
value = ARGV[1]

puts "Checking for existing record set"
list_response = Route53.list_rrsets ROUTE53_ZONE_ID, ROUTE53_ZONE_NAME

matching_rrset = list_response.detect { |item| item[:name] == name}
if matching_rrset
  matching_rrset[:values].each do |existing_value|
    puts "Deleting record #{matching_rrset[:name]} -> #{existing_value} (#{matching_rrset[:type]})"
    Route53.delete_rrset ROUTE53_ZONE_ID, matching_rrset[:name], matching_rrset[:type], existing_value
  end
else
  puts "None found"
  if update_only
    puts "Not created"
    exit 0
  end
end

puts "Creating record set #{name} -> #{value} (#{type})"
Route53.create_rrset ROUTE53_ZONE_ID, name, type, value
